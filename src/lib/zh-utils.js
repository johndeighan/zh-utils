// Generated by CoffeeScript 2.7.0
// zh-utils.coffee
var line2hWord;

import {
  undef,
  defined,
  notdefined,
  OL,
  getOptions,
  isString,
  isArray,
  isInteger
} from '@jdeighan/base-utils';

import {
  dbg,
  dbgEnter,
  dbgReturn
} from '@jdeighan/base-utils/debug';

import {
  assert
} from '@jdeighan/base-utils/exceptions';

import {
  eachCharInString
} from '@jdeighan/base-utils';

// ---------------------------------------------------------------------------
export var isZhChar = function(ch) {
  if (ch.match(/[\u4E00-\u9FFF]/)) {
    return true;
  } else {
    return false;
  }
};

// ---------------------------------------------------------------------------
export var isPinyinChar = function(ch) {
  if (ch.match(/[a-z 'āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜ]/)) {
    return true;
  } else {
    return false;
  }
};

// ---------------------------------------------------------------------------
export var splitPinyin = (str) => {
  return str.split(/\s+|\'/);
};

// ---------------------------------------------------------------------------
export var splitChinese = (str) => {
  var _, lMatches, lPinyin, nChars, nPinyin, pinyin, result, zh;
  dbgEnter('splitChinese', str);
  assert(defined(lMatches = str.match(/^(\S+)\s+(.*)$/)), `Bad zh word: '${str}'`);
  [_, zh, pinyin] = lMatches;
  assert(eachCharInString(zh, isZhChar), `Non-Chinese char in '${zh}'`);
  lPinyin = splitPinyin(pinyin);
  nPinyin = lPinyin.length;
  nChars = zh.length;
  assert(nPinyin === nChars, `Bad pinyin in '${str}'`);
  result = [zh, pinyin];
  dbgReturn('splitChinese', result);
  return result;
};

// ---------------------------------------------------------------------------
// --- Should handle lines in:
//        test.zh
//        keepers.zh
//        nouns.zh, etc.
line2hWord = function(line) {
  var _, ast, enWord, lMatches, pinWord, zhWord;
  if (notdefined(line) || (line.length === 0)) {
    return undef;
  } else if (lMatches = line.match(/^(?:□\s+)?(?:(\**)\s+)?([\u4E00-\u9FFF]+)([a-z\s'āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜ]+)\-(.*)$/)) { // optional empty checkbox
    // some number of * chars
    // Chinese characters
    [_, ast, zhWord, pinWord, enWord] = lMatches;
    if (notdefined(ast)) {
      ast = '';
    }
    return {
      numAst: ast.length,
      zh: zhWord.trim(),
      en: enWord.trim(),
      pinyin: pinWord.trim()
    };
  } else {
    return croak(`Bad line: '${line}'`);
  }
};

// ---------------------------------------------------------------------------
export var getKeepers = function() {
  var fp, lWords;
  lWords = [];
  fp = new FileProcessor('./words/nouns.zh', {
    debug: true
  });
  fp.handleLine = function(line, lineNum, hFileInfo) {
    return console.log(line2hWord(line));
  };
  fp.procAll();
  //	random.shuffle(lWords)
  return lWords;
};
